{
	"compiler": {
		"version": "0.8.12+commit.f00d7308"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "number",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "uint32",
						"name": "winLineCount",
						"type": "uint32"
					},
					{
						"indexed": false,
						"internalType": "bool[]",
						"name": "winLines",
						"type": "bool[]"
					}
				],
				"name": "Spinned",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint32",
						"name": "lineIndex",
						"type": "uint32"
					},
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint32[5]",
										"name": "slot",
										"type": "uint32[5]"
									}
								],
								"internalType": "struct SlotMachine.Line[3]",
								"name": "line",
								"type": "tuple[3]"
							}
						],
						"internalType": "struct SlotMachine.SpinResult",
						"name": "result",
						"type": "tuple"
					}
				],
				"name": "checkWinLine",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "doSpin",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					},
					{
						"internalType": "uint32",
						"name": "",
						"type": "uint32"
					},
					{
						"internalType": "bool[]",
						"name": "",
						"type": "bool[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "_flushSeed",
						"type": "bytes32"
					}
				],
				"name": "flushRandom",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWinLines",
				"outputs": [
					{
						"internalType": "uint32[][]",
						"name": "",
						"type": "uint32[][]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"SlotMachine.sol": "SlotMachine"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"SlotMachine.sol": {
			"keccak256": "0xf1f75b9e9b69d6e7938271af12d81c913f59c8fa62a2ef6b864d8d20d6a02e79",
			"license": "MIT",
			"urls": [
				"bzz-raw://2106858e377dfb4ba8c41f10769816df944d69fb9c37c6c5c7a7329308b8bc93",
				"dweb:/ipfs/QmcJXesHJWwpptewWCv9YjpmzxyrSAt3omyBCAHJGkMrdQ"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/utils/Counters.sol": {
			"keccak256": "0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1",
			"license": "MIT",
			"urls": [
				"bzz-raw://59e1c62884d55b70f3ae5432b44bb3166ad71ae3acd19c57ab6ddc3c87c325ee",
				"dweb:/ipfs/QmezuXg5GK5oeA4F91EZhozBFekhq5TD966bHPH18cCqhu"
			]
		}
	},
	"version": 1
}